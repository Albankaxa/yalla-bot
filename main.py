import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("YOUR_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'YOUR_BOT_TOKEN' –Ω–µ –∑–∞–¥–∞–Ω–∞.")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

MODERATOR_ID = 884963545
TARGET_CHANNEL = "@yallaisrael"

user_state = {}
user_data = {}
user_posts = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º

categories = {
    "work": "üë∑ –†–∞–±–æ—Ç–∞",
    "rent": "üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è",
    "car": "üöó –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ",
    "event": "üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "sell": "üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞",
    "free": "üéÅ –î–∞—Ä–æ–º"
}

CITIES = [
    "–¢–µ–ª—å-–ê–≤–∏–≤", "–•–∞–π—Ñ–∞", "–ò–µ—Ä—É—Å–∞–ª–∏–º",
    "–ë–µ—ç—Ä-–®–µ–≤–∞", "–ê—à–¥–æ–¥", "–ù–µ—Ç–∏–≤–æ—Ç",
    "–†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω", "–≠–π–ª–∞—Ç", "–•–æ–ª–æ–Ω",
    "–ë–∞—Ç-–Ø–º"
]

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for key, value in categories.items():
        kb.insert(InlineKeyboardButton(value, callback_data=f"cat_{key}"))
    kb.add(InlineKeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_posts"))
    return kb

def city_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for city in CITIES:
        kb.insert(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yalla Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def process_category(callback_query: types.CallbackQuery):
    category_key = callback_query.data[4:]
    user_id = callback_query.from_user.id
    user_state[user_id] = "city"
    user_data[user_id] = {"category": categories[category_key]}
    await bot.send_message(user_id, "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("city_"))
async def process_city_choice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    city = callback_query.data[5:]
    if user_id not in user_data:
        await callback_query.message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return
    user_data[user_id]["city"] = city
    user_state[user_id] = "text"
    await bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

@dp.message_handler(lambda message: user_state.get(message.from_user.id) == "text")
async def process_text(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return
    user_data[user_id]["text"] = message.text
    user_state[user_id] = "confirm"

    data = user_data[user_id]
    preview = (
        f"üìÇ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n"
        f"üìÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìù {data['text']}"
    )

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_text"),
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")
    )
    await message.answer(preview, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "edit_text")
async def edit_text(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id] = "text"
    await callback_query.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

@dp.callback_query_handler(lambda c: c.data == "confirm_text")
async def confirm_text(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id] = "contact"
    await callback_query.message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä –∏–ª–∏ @username):")

@dp.message_handler(lambda message: user_state.get(message.from_user.id) == "contact")
async def process_contact(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["contact"] = message.text
    user_state[user_id] = "photo"

    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="wait_photo"),
        InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
    )
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "skip_photo")
async def skip_photo(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data[user_id]["photo"] = None
    await submit_to_moderation(user_id)
    await callback_query.message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    user_state[user_id] = None

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    if user_state.get(user_id) != "photo":
        return
    photo_file_id = message.photo[-1].file_id
    user_data[user_id]["photo"] = photo_file_id
    await submit_to_moderation(user_id)
    await message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    user_state[user_id] = None

async def submit_to_moderation(user_id):
    data = user_data[user_id]
    caption = (
        f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìù {data['text']}\n"
        f"üì± {data['contact']}"
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    user_posts.setdefault(user_id, []).append({
        "category": data['category'],
        "city": data['city'],
        "text": data['text'],
        "contact": data['contact'],
        "photo": data.get("photo"),
        "status": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    })
    if data.get("photo"):
        await bot.send_photo(MODERATOR_ID, data["photo"], caption=caption, reply_markup=kb)
    else:
        await bot.send_message(MODERATOR_ID, caption, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("decline_"))
async def handle_moderation(callback_query: types.CallbackQuery):
    action, user_id = callback_query.data.split("_")
    user_id = int(user_id)
    posts = user_posts.get(user_id)
    if not posts:
        await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —ç—Ç–æ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–¥–µ—Ä–∏—É–µ–º
    data = posts[-1]
    caption = (
        f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìù {data['text']}\n"
        f"üì± {data['contact']}"
    )
    if action == "approve":
        if data.get("photo"):
            await bot.send_photo(TARGET_CHANNEL, data["photo"], caption=caption)
        else:
            await bot.send_message(TARGET_CHANNEL, caption)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        data["status"] = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
        await callback_query.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    else:
        data["status"] = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        await callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

@dp.callback_query_handler(lambda c: c.data == "cancel_post")
async def cancel_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id] = None
    user_data.pop(user_id, None)
    await callback_query.message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")

@dp.callback_query_handler(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id] = None
    user_data.pop(user_id, None)
    await callback_query.message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "my_posts")
async def my_posts(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    posts = user_posts.get(user_id)
    if not posts:
        await callback_query.message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    text = "üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
    for i, post in enumerate(posts, 1):
        text += (
            f"{i}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}\n"
            f"   –ì–æ—Ä–æ–¥: {post['city']}\n"
            f"   –¢–µ–∫—Å—Ç: {post['text']}\n"
            f"   –ö–æ–Ω—Ç–∞–∫—Ç: {post['contact']}\n"
            f"   –°—Ç–∞—Ç—É—Å: {post['status']}\n\n"
        )
    await callback_query.message.answer(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç'):")

@dp.message_handler(content_types=["photo", "text"])
async def process_photo(message: types.Message):
    user_id = message.from_user.id
    if user_state.get(user_id) != "photo":
        return
    user_data[user_id]["photo"] = message.photo[-1].file_id if message.photo else None
    user_state[user_id] = "done"

    data = user_data[user_id]
    caption = f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
üèô –ì–æ—Ä–æ–¥: {data['city']}
üìù {data['text']}
üì± {data['contact']}"

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
    )

    if data["photo"]:
        await bot.send_photo(MODERATOR_ID, data["photo"], caption=caption, reply_markup=kb)
    else:
        await bot.send_message(MODERATOR_ID, caption, reply_markup=kb)

    await message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    user_state[user_id] = None

@dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("decline_"))
async def handle_moderation(callback_query: types.CallbackQuery):
    action, user_id = callback_query.data.split("_")
    user_id = int(user_id)
    data = user_data.get(user_id)
    if not data:
        await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    caption = f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}
üèô –ì–æ—Ä–æ–¥: {data['city']}
üìù {data['text']}
üì± {data['contact']}"
    if action == "approve":
        if data["photo"]:
            await bot.send_photo(TARGET_CHANNEL, data["photo"], caption=caption)
        else:
            await bot.send_message(TARGET_CHANNEL, caption)
        await callback_query.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    else:
        await callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

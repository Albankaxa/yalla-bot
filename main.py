import os
import asyncio
import aiohttp
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

# üîê –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("YOUR_BOT_TOKEN")

# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    exit(1)

# üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ webhook
async def check_and_delete_webhook():
    base_url = f"https://api.telegram.org/bot{API_TOKEN}"
    async with aiohttp.ClientSession() as session:
        try:
            # getMe
            async with session.get(f"{base_url}/getMe") as response:
                if response.status == 200:
                    data = await response.json()
                    bot_info = data['result']
                    logging.info(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: {bot_info['first_name']} (@{bot_info['username']})")
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ getMe: {response.status}")
                    return

            # getWebhookInfo
            async with session.get(f"{base_url}/getWebhookInfo") as response:
                if response.status == 200:
                    data = await response.json()
                    webhook_info = data['result']
                    logging.info(f"üì° Webhook URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                    logging.info(f"üìä Pending updates: {webhook_info.get('pending_update_count', 0)}")
                    logging.info(f"üîÑ Last error: {webhook_info.get('last_error_message', '–ù–µ—Ç')}")
                    if webhook_info.get("last_error_date"):
                        error_time = datetime.fromtimestamp(webhook_info["last_error_date"])
                        logging.info(f"üïí –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏: {error_time}")

                    # –£–¥–∞–ª—è–µ–º webhook
                    if webhook_info.get('url'):
                        logging.info("üîÑ –£–¥–∞–ª—è–µ–º webhook...")
                        async with session.post(
                            f"{base_url}/deleteWebhook",
                            json={"drop_pending_updates": True}
                        ) as del_response:
                            if del_response.status == 200:
                                logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
                            else:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {del_response.status}")
        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.row(
    KeyboardButton("üìå –†–∞–±–æ—Ç–∞"),
    KeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è")
)
main_menu.row(
    KeyboardButton("üöó –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ"),
    KeyboardButton("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –∂–∏—Ç–µ–ª—è–º –ò–∑—Ä–∞–∏–ª—è üáÆüá±",
        reply_markup=main_menu
    )

@dp.message_handler(lambda msg: msg.text == "üìå –†–∞–±–æ—Ç–∞")
async def jobs_handler(message: types.Message):
    await message.answer("üßë‚Äçüíº –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞–∫–∞–Ω—Å–∏–∏. –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞.")

@dp.message_handler(lambda msg: msg.text == "üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è")
async def rent_handler(message: types.Message):
    await message.answer("üè° –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞—Ä–µ–Ω–¥–µ –∂–∏–ª—å—è.")

@dp.message_handler(lambda msg: msg.text == "üöó –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ")
async def cars_handler(message: types.Message):
    await message.answer("üöò –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")

@dp.message_handler(lambda msg: msg.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def events_handler(message: types.Message):
    await message.answer("üé≠ –ó–¥–µ—Å—å –±—É–¥—É—Ç –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º.")

# üöÄ Startup: —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º Webhook
async def on_startup(dp: Dispatcher):
    await check_and_delete_webhook()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ Webhook")

# üîÅ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        logger.info("üì¶ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        executor.start_polling(dp, on_startup=on_startup)
    except TerminatedByOtherGetUpdates:
        logger.error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ (polling).")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram import Bot, Dispatcher, executor, types
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("YOUR_BOT_TOKEN")
ADMIN_ID = 884963545

if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'YOUR_BOT_TOKEN' –Ω–µ –∑–∞–¥–∞–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
class PostAd(StatesGroup):
    Category = State()
    Description = State()
    Photo = State()
    Price = State()
    City = State()
    Contact = State()
    Confirm = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_kb.add(
    KeyboardButton("1Ô∏è‚É£ –†–∞–±–æ—Ç–∞"),
    KeyboardButton("2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è"),
    KeyboardButton("3Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ"),
    KeyboardButton("4Ô∏è‚É£ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
)
main_menu_kb.add(
    KeyboardButton("5Ô∏è‚É£ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞"),
    KeyboardButton("6Ô∏è‚É£ –î–∞—Ä–æ–º"),
)
main_menu_kb.add(
    KeyboardButton("üì§ –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
    KeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –≤ –ò–∑—Ä–∞–∏–ª–µ üáÆüá±\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=main_menu_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "üì§ –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_posting(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–†–∞–±–æ—Ç–∞", "–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è")
    markup.add("–ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    markup.add("–ë–∞—Ä–∞—Ö–æ–ª–∫–∞", "–î–∞—Ä–æ–º")
    markup.add("üîô –ù–∞–∑–∞–¥")

    await PostAd.Category.set()
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å?", reply_markup=markup)

# –ù–∞–∑–∞–¥
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥", state="*")
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb)

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(state=PostAd.Category)
async def set_category(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back(message, state)
        return
    await state.update_data(category=message.text)
    await PostAd.Description.set()
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")

# –û–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(state=PostAd.Description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await PostAd.Photo.set()
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥'")

# –§–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=PostAd.Photo)
async def set_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await PostAd.Price.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–µ—Å–ª–∏ –≤–µ—â—å –æ—Ç–¥–∞—ë—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ 0):")

# –¶–µ–Ω–∞
@dp.message_handler(state=PostAd.Price)
async def set_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await PostAd.City.set()
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–µ—â—å/–æ–±—ä–µ–∫—Ç?")

# –ì–æ—Ä–æ–¥
@dp.message_handler(state=PostAd.City)
async def set_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await PostAd.Contact.set()
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä –∏–ª–∏ Telegram):")

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(state=PostAd.Contact)
async def set_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    text = (
        f"üì¨ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}‚Ç™\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")
    )

    await bot.send_photo(chat_id=ADMIN_ID, photo=data['photo'], caption=text, reply_markup=kb)
    await message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –°–ø–∞—Å–∏–±–æ!")
    await state.finish()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data in ["approve", "reject"])
async def moderation_callback(call: types.CallbackQuery):
    if call.data == "approve":
        await call.message.edit_caption(call.message.caption + "\n\n‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
    else:
        await call.message.edit_caption(call.message.caption + "\n\n‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

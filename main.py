import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

API_TOKEN = os.getenv("YOUR_BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω YOUR_BOT_TOKEN")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –î–∞–Ω–Ω—ã–µ ---

CATEGORIES = [
    "üè¢ –†–∞–±–æ—Ç–∞",
    "üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è",
    "üöó –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ",
    "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "üõí –ë–∞—Ä–∞—Ö–æ–ª–∫–∞",
    "üéÅ –î–∞—Ä–æ–º"
]

CITIES = {
    "–°–µ–≤–µ—Ä": ["–•–∞–π—Ñ–∞", "–ù–∞–≥–∞—Ä–∏—è", "–ê–∫–∫–æ", "–ö–∞—Ä–º–∏—ç–ª—å", "–¶—Ñ–∞—Ç", "–ù–∞–∑–∞—Ä–µ—Ç", "–ê—Ü–º–æ–Ω", "–ú–∞–∞–ª–æ—Ç", "–ö–∞—Ü—Ä–∏–Ω", "–¢–≤–µ—Ä–∏—è"],
    "–¶–µ–Ω—Ç—Ä": ["–¢–µ–ª—å-–ê–≤–∏–≤", "–ù–µ—Ç–∞–Ω–∏—è", "–ì–µ—Ä—Ü–ª–∏—è", "–ë–∞—Ç-–Ø–º", "–•–æ–ª–æ–Ω", "–†–∞–º–∞—Ç-–ì–∞–Ω", "–ü–µ—Ç–∞—Ö-–¢–∏–∫–≤–∞", "–†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω", "–ë–Ω–µ–π-–ë—Ä–∞–∫", "–†–∞–∞–Ω–∞–Ω–∞"],
    "–Æ–≥": ["–ë–µ—ç—Ä-–®–µ–≤–∞", "–ê—à–¥–æ–¥", "–ê—à–∫–µ–ª–æ–Ω", "–≠–π–ª–∞—Ç", "–ö–∏—Ä—å—è—Ç-–ì–∞—Ç", "–°–¥–µ—Ä–æ—Ç", "–ú–∏—Ü–ø–µ-–†–∞–º–æ–Ω", "–î–∏–º–æ–Ω–∞", "–û—Ñ–∞–∫–∏–º", "–ù–µ—Ç–∏–≤–æ—Ç"]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# { user_id: [ {category, city, description, photos:list(file_id)} ] }
user_ads = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    kb.add("üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    return kb

def categories_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in CATEGORIES:
        kb.add(cat)
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def cities_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for region, cities in CITIES.items():
        kb.add(f"‚¨áÔ∏è {region}")
        for city in cities:
            kb.add(city)
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return kb

def back_to_main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

# --- FSM States ---

class AdForm(StatesGroup):
    waiting_for_category = State()
    waiting_for_city = State()
    waiting_for_description = State()
    waiting_for_photos = State()
    confirm = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_ad_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=categories_kb())
    await AdForm.waiting_for_category.set()

@dp.message_handler(state=AdForm.waiting_for_category)
async def ad_category_chosen(message: types.Message, state: FSMContext):
    if message.text not in CATEGORIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return
    await state.update_data(category=message.text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ (—Ä–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for region, cities in CITIES.items():
        kb.add(f"‚¨áÔ∏è {region}")
        for city in cities:
            kb.add(city)
    kb.add("‚ùå –û—Ç–º–µ–Ω–∞")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
    await AdForm.waiting_for_city.set()

@dp.message_handler(state=AdForm.waiting_for_city)
async def ad_city_chosen(message: types.Message, state: FSMContext):
    all_cities = sum(CITIES.values(), [])
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
        return
    if message.text not in all_cities:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return
    await state.update_data(city=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=ReplyKeyboardRemove())
    await AdForm.waiting_for_description.set()

@dp.message_handler(state=AdForm.waiting_for_description, content_types=types.ContentTypes.TEXT)
async def ad_description_received(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) > 1000:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ 5 —à—Ç—É–∫).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.\n"
        "–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done.",
        reply_markup=back_to_main_kb()
    )
    await AdForm.waiting_for_photos.set()

@dp.message_handler(state=AdForm.waiting_for_photos, content_types=[types.ContentType.PHOTO, types.ContentType.TEXT])
async def ad_photos_handler(message: types.Message, state: FSMContext):
    if message.text == "/done":
        data = await state.get_data()
        category = data['category']
        city = data['city']
        description = data['description']
        photos = data.get('photos', [])
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        ad = {
            "category": category,
            "city": city,
            "description": description,
            "photos": photos
        }
        user_ads.setdefault(user_id, []).append(ad)
        await message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=main_menu_kb())
        await state.finish()
        return

    if message.photo:
        photo = message.photo[-1]
        file_id = photo.file_id
        data = await state.get_data()
        photos = data.get("photos", [])
        if len(photos) >= 5:
            await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ.")
            return
        photos.append(file_id)
        await state.update_data(photos=photos)
        await message.answer(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(photos)}/5). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ /done –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done.")

@dp.message_handler(lambda msg: msg.text == "üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_my_ads(message: types.Message):
    user_id = message.from_user.id
    ads = user_ads.get(user_id)
    if not ads:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_menu_kb())
        return
    for i, ad in enumerate(ads, 1):
        text = (
            f"üìå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{i}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad['category']}\n"
            f"–ì–æ—Ä–æ–¥: {ad['city']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad['description']}"
        )
        if ad['photos']:
            media = [types.InputMediaPhoto(file_id) for file_id in ad['photos']]
            await message.answer_media_group(media)
        await message.answer(text)
    await message.answer("–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", reply_markup=main_menu_kb())

@dp.message_handler(lambda msg: msg.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_kb())

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    executor.start_polling(dp, skip_updates=True)

import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from collections import defaultdict
import asyncio

API_TOKEN = os.getenv("YOUR_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'YOUR_BOT_TOKEN' –Ω–µ –∑–∞–¥–∞–Ω–∞.")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

MODERATOR_ID = 884963545
TARGET_CHANNEL = "@yallaisrael"

user_state = {}
user_data = {}
user_posts = {}
user_lang = defaultdict(lambda: "ru")

categories = {
    "work": "üë∑ –†–∞–±–æ—Ç–∞",
    "rent": "üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è",
    "car": "üöó –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ",
    "event": "üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "sell": "üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞",
    "free": "üéÅ –î–∞—Ä–æ–º"
}

CITIES = [
    "–¢–µ–ª—å-–ê–≤–∏–≤", "–•–∞–π—Ñ–∞", "–ò–µ—Ä—É—Å–∞–ª–∏–º",
    "–ë–µ—ç—Ä-–®–µ–≤–∞", "–ê—à–¥–æ–¥", "–ù–µ—Ç–∏–≤–æ—Ç",
    "–†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω", "–≠–π–ª–∞—Ç", "–•–æ–ª–æ–Ω", "–ë–∞—Ç-–Ø–º"
]

LANGUAGES = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá∫üá∏ English",
    "he": "üáÆüá± ◊¢◊ë◊®◊ô◊™"
}

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for key, value in categories.items():
        kb.insert(InlineKeyboardButton(value, callback_data=f"cat_{key}"))
    kb.add(InlineKeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_posts"))
    kb.add(InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="change_lang"))
    kb.add(InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", switch_inline_query=""))
    return kb

def city_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for city in CITIES:
        kb.insert(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    return kb

def lang_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for code, name in LANGUAGES.items():
        kb.insert(InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_state.pop(user_id, None)
    user_data.pop(user_id, None)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yalla Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
        "4. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "5. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç\n"
        "6. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "7. –î–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: /start ‚Üí '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'\n"
        "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫: /start ‚Üí '–Ø–∑—ã–∫'"
    )
    await message.answer(help_text)

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id != MODERATOR_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    total_users = len(user_posts)
    total_posts = sum(len(posts) for posts in user_posts.values())
    await message.answer(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_posts}")

@dp.callback_query_handler(lambda c: c.data.startswith("lang_"))
async def set_language(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = callback_query.data[5:]
    user_lang[user_id] = lang
    await callback_query.message.edit_text(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {LANGUAGES[lang]}", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "change_lang")
async def change_language(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=lang_menu())

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yalla Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state.pop(user_id, None)
    user_data.pop(user_id, None)
    await callback_query.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yalla Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def choose_category(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cat = callback_query.data[4:]
    user_data[user_id] = {"category": categories[cat]}
    user_state[user_id] = "city"
    await callback_query.message.edit_text("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("city_"))
async def choose_city(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    city = callback_query.data[5:]
    if user_id not in user_data:
        await callback_query.message.edit_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start", reply_markup=None)
        return
    user_data[user_id]["city"] = city
    user_state[user_id] = "text"
    await callback_query.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

@dp.message_handler(lambda message: user_state.get(message.from_user.id) == "text")
async def enter_text(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(message.text) > 1000:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    user_data[user_id]["text"] = message.text
    user_state[user_id] = "contact"
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username")

@dp.message_handler(lambda message: user_state.get(message.from_user.id) == "contact")
async def enter_contact(message: types.Message):
    user_id = message.from_user.id
    contact = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if len(contact) < 3:
        await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ @username")
        return
    
    user_data[user_id]["contact"] = contact
    user_state[user_id] = "photo"
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="wait_photo"),
        InlineKeyboardButton("‚è≠ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="skip_photo")
    )
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "wait_photo")
async def wait_for_photo(callback_query: types.CallbackQuery):
    user_state[callback_query.from_user.id] = "photo"
    await callback_query.message.edit_text("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ:")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def receive_photo(message: types.Message):
    user_id = message.from_user.id
    if user_state.get(user_id) != "photo":
        return
    user_data[user_id]["photo"] = message.photo[-1].file_id
    await send_to_moderator(user_id)
    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    user_state[user_id] = None

@dp.callback_query_handler(lambda c: c.data == "skip_photo")
async def skip_photo(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data[user_id]["photo"] = None
    await send_to_moderator(user_id)
    await callback_query.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    user_state[user_id] = None

async def send_to_moderator(user_id):
    try:
        data = user_data[user_id]
        caption = (
            f"üóÇ {data['category']}\nüèô {data['city']}\nüìù {data['text']}\nüì± {data['contact']}\n"
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
        )
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
        )
        if data.get("photo"):
            await bot.send_photo(MODERATOR_ID, data["photo"], caption=caption, reply_markup=kb)
        else:
            await bot.send_message(MODERATOR_ID, caption, reply_markup=kb)
        user_posts.setdefault(user_id, []).append({**data, "status": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve(callback_query: types.CallbackQuery):
    try:
        user_id = int(callback_query.data.split("_")[1])
        if user_id not in user_posts or not user_posts[user_id]:
            await callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        data = user_posts[user_id][-1]
        caption = (
            f"üóÇ {data['category']}\nüèô {data['city']}\nüìù {data['text']}\nüì± {data['contact']}"
        )
        if data.get("photo"):
            await bot.send_photo(TARGET_CHANNEL, data["photo"], caption=caption)
        else:
            await bot.send_message(TARGET_CHANNEL, caption)
        data["status"] = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
        await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
        await callback_query.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

@dp.callback_query_handler(lambda c: c.data.startswith("decline_"))
async def decline(callback_query: types.CallbackQuery):
    try:
        user_id = int(callback_query.data.split("_")[1])
        if user_id not in user_posts or not user_posts[user_id]:
            await callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        user_posts[user_id][-1]["status"] = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await callback_query.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")

@dp.callback_query_handler(lambda c: c.data == "my_posts")
async def my_posts(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    posts = user_posts.get(user_id)
    if not posts:
        await callback_query.message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ))
        return
    
    text = "üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
    for i, p in enumerate(posts, 1):
        text += f"{i}. üóÇ {p['category']}\nüèô {p['city']}\nüìù {p['text'][:50]}{'...' if len(p['text']) > 50 else ''}\nüì± {p['contact']}\nüìå –°—Ç–∞—Ç—É—Å: {p['status']}\n\n"
    
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    await callback_query.message.edit_text(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_state:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ")
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")

async def on_startup(dp):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        await bot.delete_webhook()
        logging.info("Webhook —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

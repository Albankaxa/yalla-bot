from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import logging
import os
import asyncio

API_TOKEN = os.getenv("YOUR_BOT_TOKEN")
ADMIN_ID = 884963545

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- FSM ---
class Form(StatesGroup):
    choosing_category = State()
    choosing_city = State()
    choosing_price_range = State()
    showing_ads = State()
    filtering_ads = State()
    submitting_ad = State()
    awaiting_moderation = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1Ô∏è‚É£ –†–∞–±–æ—Ç–∞", "2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è")
    kb.add("3Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "4Ô∏è‚É£ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    kb.add("üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞", "üéÅ –î–∞—Ä–æ–º")
    kb.add("üì§ –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
    return kb

def city_menu():
    cities = ["–¢–µ–ª—å-–ê–≤–∏–≤", "–•–∞–π—Ñ–∞", "–ê—à–¥–æ–¥", "–ë–∞—Ç-–Ø–º", "–ù–µ—Ç–∞–Ω–∏—è", "–ò–µ—Ä—É—Å–∞–ª–∏–º", "–ê—à–∫–µ–ª–æ–Ω", "–ë–µ—ç—Ä-–®–µ–≤–∞", "–†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω", "–ü–µ—Ç–∞—Ö-–¢–∏–∫–≤–∞"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(cities), 2):
        kb.add(cities[i], cities[i+1] if i+1 < len(cities) else "")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def price_menu(category):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if category == "2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è":
        kb.add("–î–æ 3000‚Ç™", "3000‚Äì5000‚Ç™", "5000‚Ç™ –∏ –≤—ã—à–µ", "–ù–µ –≤–∞–∂–Ω–æ")
    elif category == "3Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ":
        kb.add("–î–æ 10,000‚Ç™", "10,000‚Äì20,000‚Ç™", "20,000‚Äì30,000‚Ç™", "30,000‚Ç™ –∏ –≤—ã—à–µ", "–ù–µ –≤–∞–∂–Ω–æ")
    elif category == "üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞":
        kb.add("–î–æ 100‚Ç™", "100‚Äì500‚Ç™", "500‚Äì1000‚Ç™", "1000‚Ç™ –∏ –≤—ã—à–µ", "–ù–µ –≤–∞–∂–Ω–æ")
    return kb

def filter_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", "üïí –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ")
    kb.add("üí∏ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ", "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def ads_navigation_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def moderation_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject"))
    return kb

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –≤ –ò–∑—Ä–∞–∏–ª–µ üáÆüá±\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=main_menu())

# --- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message_handler(lambda m: m.text in ["1Ô∏è‚É£ –†–∞–±–æ—Ç–∞", "2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è", "3Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "4Ô∏è‚É£ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞", "üéÅ –î–∞—Ä–æ–º"])
async def category_chosen(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await Form.choosing_city.set()
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())

# --- –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ ---
@dp.message_handler(lambda m: m.text in ["–¢–µ–ª—å-–ê–≤–∏–≤", "–•–∞–π—Ñ–∞", "–ê—à–¥–æ–¥", "–ë–∞—Ç-–Ø–º", "–ù–µ—Ç–∞–Ω–∏—è", "–ò–µ—Ä—É—Å–∞–ª–∏–º", "–ê—à–∫–µ–ª–æ–Ω", "–ë–µ—ç—Ä-–®–µ–≤–∞", "–†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω", "–ü–µ—Ç–∞—Ö-–¢–∏–∫–≤–∞"], state=Form.choosing_city)
async def city_chosen(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(city=message.text)
    category = user_data['category']
    if category in ["2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è", "3Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "üì¶ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞"]:
        await Form.choosing_price_range.set()
        await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=price_menu(category))
    else:
        await Form.showing_ads.set()
        await message.answer(f"üîç –ü–æ–∫–∞–∑—ã–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {category} –≤ {message.text}\n(–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ)", reply_markup=filter_menu())

# --- –í—ã–±–æ—Ä —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ---
@dp.message_handler(state=Form.choosing_price_range)
async def price_range_chosen(message: types.Message, state: FSMContext):
    await state.update_data(price_range=message.text)
    data = await state.get_data()
    await Form.showing_ads.set()
    await message.answer(f"üîç –ü–æ–∫–∞–∑—ã–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {data['category']} –≤ {data['city']} –ø–æ —Ü–µ–Ω–µ: {data['price_range']}", reply_markup=filter_menu())

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
@dp.message_handler(lambda m: m.text.startswith("üîç") or m.text.startswith("üïí") or m.text.startswith("üí∏") or m.text.startswith("üìÑ"), state=Form.showing_ads)
async def handle_filters(message: types.Message, state: FSMContext):
    await message.answer("üì¢ [–ó–∞–≥–ª—É—à–∫–∞] –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", reply_markup=ads_navigation_menu())

# --- –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ---
@dp.message_handler(lambda m: m.text == "üì§ –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def submit_ad_start(message: types.Message, state: FSMContext):
    await Form.choosing_category.set()
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=main_menu())

# --- –ù–∞–∑–∞–¥ ---
@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state="*")
async def go_back(message: types.Message, state: FSMContext):
    current = await state.get_state()
    if current == Form.choosing_price_range.state:
        await Form.choosing_city.set()
        await message.answer("üìç –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞:", reply_markup=city_menu())
    elif current == Form.choosing_city.state:
        await Form.choosing_category.set()
        await message.answer("üîô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())
    elif current == Form.showing_ads.state:
        await Form.choosing_price_range.set()
        user_data = await state.get_data()
        await message.answer("üí∞ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã:", reply_markup=price_menu(user_data['category']))
    else:
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
